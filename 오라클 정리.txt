오라클 수업 자료
SQL의 개요
 - Structured Query Language
 - DBMS상에서 데이타를 읽고 쓰고 삭제하는 등 데이타를 관리하기 위한 일종의 
   프로그램 언어
 - 집합적 언어(데이타를 특정 집합 단위로 분류해 이 단위별로 한번에 처리하는 언어)
 - 1980년대 후반 RDBMS의 표준언어로 SQL을 채택
 - DDL, DML, DCL등으로 구별하여 사용

DDL(Data Definition Language)
 - CREATE : 테이블이나 인텍스, 뷰등 데이타베이스 객체를 생성
 - DROP : 생성된 데이타베이스 객체를 삭제
 - ALTER : 이미 생성된 데이타베이스 객체를 수정
 - TRANCATE : 테이블이나 클러스터의 데이터를 통째로 삭제

DML(Data Manipulation Language)
 - SELECT : 테이블이나 뷰에 있는 데이터 조회
 - INSERT : 데이터를 추가
 - UPDATE : 이미 생성된 데이터를 수정
 - DELETE : 데이터를 삭제

트랜잭션 제어
 - COMMIT : 트랙잭션 처리, 변경된 데이터를 최종 적용
 - ROLLBACK : 트랙잭션 처리, 변경된 데이터를 적용하지 않고 이전으로 되돌림
 - SAVEPOINT : rollback 위치 지정

DCL(Data Control Language)
 - GRANT : 사용자에게 특정 권한을 부여
 - REVOKE : 사용자에게 부여된 권한을 회수

PL/SQL 
 - SQL을 절차적으로 사용할 수 있게 해주는 언어
 - 코드와 문법이 존재하지만, 그 중심은 SQL에 있다
 - DB프로그래밍이라는 것은 PL/SQL을 이용해 함수나 프로시저를 만들어 여러 작업을 처리하는 것을 말한다

그럼 오라클 설치를 마쳤으면 오라클 command에 들어가서 직접 작성을 해보자
우선 관리자로 로그인을 해보자
SQL> conn/as sysdba;

관리자 로그인이 혹시 안된다면...
conn system/oracle 로 로그인을 한다(둘다 관리자 로그인임)

관리자로 로그인을 하고 제일먼저 할 일은 포트번호를 좀 바꾸어 주자
톰캣의 포트번호와 오라클 웹포트의 번호가 둘다 8080이라서 겹치게 된다
톰캣을 바꾸어도 되고, 오라클을 바꾸어도 되는데 우린 오라클을 바꾸어 사용하자

오라클 웹포트 번호 보기
SQL> select dbms_xdb.gethttpport() from dual;
DBMS_XDB.GETHTTPPORT()
----------------------
                  8080
오라클 웹포트 번호 바꾸기
SQL> exec dbms_xdb.sethttpport(9090);

오라클 웹포트 변경 확인하기
SQL> select dbms_xdb.gethttpport() from dual;
DBMS_XDB.GETHTTPPORT()
----------------------
                  9090

포트번호를 변경하였으면 이제 사용자 계정을 만들어 보자
관리자 계정은 말 그대로 관리자용이므로 우리가 여기서 작업을 하는게 아니라
사용자 계정을 만들어서 그 사용자 계정에서 작업을 하는 것이다.

사용자 계정 만들기
SQL> create user web01 identified by web01;

user뒤에 나오는 단어가 아이디가 되고 by 뒤에 나오는 단어가 패스워드가 된다

계정을 만들었다고 바로 로그인을 할 수 있는건 아니다.
계정을 만들었으면 그 계정이 사용할 수 있는 권한을 주어야 사용이 가능해 진다.
우린 이 계정에 접속할수 있는 권한과, 리소스를 모두 다룰수 있는 권한을 주자.
SQL> grant resource, connect to web01;

사용자계정에 로그인 하기
SQL> conn web01/web01;

현재 사용자 보기
SQL> show user;
USER은 "web01"입니다

**테이블을 만들고, 수정하고, 삭제하고..(DDL)

사용자계정에 로그인이 정상적으로 되었으면 이제 table을 만들어 보자
database는 자료를 담아 관리하는 것이다.
그 자료를 담기 위해 제일먼저 해야하는 것이 그 그릇을 만들어 주는것인데 
이걸 table이라고 한다.
table을 만들기 위해선 기본적인 자료형을 알아야 한다.

** 오라클에서 사용하는 기본적인 자료형
데이타타입
 - char : 고정길이문자, 최대 2000자
 - varchar2 : 가변길이문자, 최대 4000자
숫자데이타타입
 - number : [(p,[s])] - 가변숫자
   p는 소수점 기준 모든 유효숫자 자릿수를 의미
   s가 양수면 소수점이하, s가 음수이면 소수점이상 유효자리수를 나타낸다
날짜데이타타입
 - DATE : 
 - TIMESTAMP : 보다 정밀한 출력
LOB데이터타입
 - CLOB : 문자형 대용량 객체
 - NCLOB : 유니코드를 포함한 문자형 대용량 객체
 - BLOB : 그래픽, 이미지, 동영상

이중 우리는 수치자료형(number)과 문자자료형(varchar2(길이))만 우선적으로 기억하자

** 제약조건(constraints)  
not null : 반드시 해당 컬럼은 데이타를 넣어야 한다(안넣으면 오류발생)

unique : 해당컬럼에 들어가는 값은 유일해야 만 한다

primary key : 기본키, not null과 unique 속성을 동시에 가진 제약조건, 테이블당 1개 생성
 - 오라클을 비롯한 여러 DBMS는 데이터 무결성을 보장하는데, 
데이터 무결성이란 데이터의 정확성과 일관성을 유지한다는 뜻. 
데이타 무결성을 실질적으로 구현한 것이 바로 기본키 이다

foreign key : 테이블간의 참조 데이터 무결성을 위한 제약조건

check : 컬럼에 입력되는 데이터를 체크해 특정 조건에 맞는 데이터만 입력받고 
        그렇지 않으면 오류

이중 우선적으로 not null과 primary key만 알아두자.

테이블을 만들어 보자
SQL> create table testmember
  2  (id number primary key,
  3  name varchar2(20) not null,
  4  members number default 0,
  5  birth varchar2(10) not null,
  6  email varchar2(50),
  7  grand varchar2(10));
이때 입력할때 옆에 보이는 숫자는 enter를 치면 나오는 일종의 줄번호라고 생각하면 된다
오라클도 ;이 나올때까지 하나의 문장으로 보기에 줄바꿈이 되었다고 문장을 종료시키는 것이
아니라 계속 이어지기때문에 줄번호를 나타내 주고 있다.

그럼 table을 잘 만들어졌는지 table의 구조를 한번 보자
(desc : describe의 약자)
SQL> desc testMember;
 이름                                      널?      유형
 ----------------------------------------- -------- ----------------------------
 ID                                        not null NUMBER
 NAME                                      not null VARCHAR2(20)
 MEMBERS                                            NUMBER
 BIRTH                                     not null VARCHAR2(10)
 EMAIL                                              VARCHAR2(50)
 GRAND                                              VARCHAR2(10)

현재 계정에 어떤 테이블이 있는지 궁금하다면..
SQL> select * from tab;

테이블에 대한 실습을 하기 위해 쌍둥이 테이블을 하나 만들어 보자

SQL> create table testMember2
  2  as select * from testMember;
이렇게 하면 testMember와 똑같은 테이블이 testMember2라는 이름으로 만들어 진다

확인해 보자
SQL> select * from tab;

이제 테이블의 column을 변경하여 보자
우선 column을 하나 추가해 보자
SQL> alter table testmember2 add grand2 varchar2(10);
테이블이 변경되었습니다.
SQL> desc testmember2;
 이름                                      널?      유형
 ----------------------------------------- -------- ----------------------------
 ID                                        not null NUMBER
 NAME                                      not null VARCHAR2(20)
 MEMBERS                                            NUMBER
 BIRTH                                     not null VARCHAR2(10)
 EMAIL                                              VARCHAR2(50)
 GRAND                                              VARCHAR2(10)
 GRAND2                                             VARCHAR2(10)

grand2가 하나 추가된것이 보일것이다.
다음은 grand2의 유형을 변경시켜 보겠다

SQL> alter table testmember2 modify (grand2 varchar2(20));
테이블이 변경되었습니다.
SQL> desc testmember2;
 이름                                      널?      유형
 ----------------------------------------- -------- ----------------------------
 ID                                        not null NUMBER
 NAME                                      not null VARCHAR2(20)
 MEMBERS                                            NUMBER
 BIRTH                                     not null VARCHAR2(10)
 EMAIL                                              VARCHAR2(50)
 GRAND                                              VARCHAR2(10)
 GRAND2                                             VARCHAR2(20)

grand2의 자료형이 varchar2(10)에서 varchar2(20)으로 변경된것이 보일것이다

SQL> alter table testmember2 rename column grand2 to grand3;
테이블이 변경되었습니다.
SQL> desc testmember2;
 이름                                      널?      유형
 ----------------------------------------- -------- ----------------------------
 ID                                        not null NUMBER
 NAME                                      not null VARCHAR2(20)
 MEMBERS                                            NUMBER
 BIRTH                                     not null VARCHAR2(10)
 EMAIL                                              VARCHAR2(50)
 GRAND                                              VARCHAR2(10)
 GRAND3                                             VARCHAR2(20)

rename을 이용하면 column명이 변경되는것이 보일것이다

SQL> alter table testmember2 drop (grand3);
SQL> desc testmember2;
 이름                                      널?      유형
 ----------------------------------------- -------- ----------------------------
 ID                                        not null NUMBER
 NAME                                      not null VARCHAR2(20)
 MEMBERS                                            NUMBER
 BIRTH                                     not null VARCHAR2(10)
 EMAIL                                              VARCHAR2(50)
 GRAND                                              VARCHAR2(10)

drop을 이용하면 table이 삭제가 되는데...
이때 반드시 column명을 ()로 감싸주어야 한다. ()로 감싸주지 않으면 에러 발생!!!

SQL> drop table testMember2;
테이블이 삭제되었습니다.

SQL> select * from tab;

테이블이 삭제되어 testmember2가 안나오는걸 볼수가 있을것이다.


** 테이블에 자료처리(DML)
하나의 레코드를 testmember에 넣어 보겠다.
SQL> insert into testmember(id, name, members, birth, email, grand)
  2  values (1, '소녀시대', 238839, '2007-08-02', 'girl@email.com', 'A');

테이블명 옆에 column명을 모두 적고, 그 column명에 맞추어서 values 뒤에 자료를
넣어주면 된다.

아래와 같이 입력하면 오류가 발생한다.
SQL> insert into testmember(id, name, birth, email, grand, members)
  2  values (2, '아이유', 190378, '2008-09-23', 'iu@email.com', 'A');

이유는 column명 적은 내용과 value값의 데이타타입이 일치하지 않아서 발생되는 오류

SQL> insert into testmember(id, name, members, birth, email, grand)
  2  values (2, '아이유', 190378, '2008-09-23', 'iu@email.com', 'A');

만약에 모든 column값을 다 입력해 준다고 한다면..

SQL> insert into testmember
  2  values (3, '트와이스', 64798, '2015-10-19', 'twice@email.com', 'B');

이렇게 column명을 안적고 입력해도 가능하다.
(단, 모든 column명을 적어주고 만든 순서대로 적어줘야만 한다.)

SQL> select * from testmember;

테이블에 들어간 내용을 보기 위해선 이렇게 입력하면 되는데.. 보기가 매우 않좋다..
이유는 varchar2의 자리수를 모두 출력해주기 때문인데...
숫자형은 안되지만, 문자열은 화면보여줄때 칸을 줄여줄 수 있다.

SQL> column name format a10;
SQL> col email for a15;
SQL> col birth for a10;
SQL> col grand for a5;

a뒤의 숫자가 크기를 말해준다..

SQL> select * from testmember;

이제 입력된 자료가 한눈에 보이게 될 것이다.

여기서 아래와 같이 입력해 보자

SQL> truncate table testmember;
테이블이 잘렸습니다.
SQL> select * from testmember;
선택된 레코드가 없습니다.

truncate은 테이블에 있는 자료를 영구히 없애버리는 명령이다.(DDL명령)

이번에는 sequence를 만들어 보자

** 시퀀스 
 - 자동으로 순번을 반환하는 데이타베이스객체
   특별한 로직으로 번호를 추출하는것이 아니라, 단순히 증감연산으로 
   유일한 숫자값을 구하고자 할때 시퀀스를 사용하면 매우 편리하다
create sequence sequence명 
increment by 증감숫자
start with 시작숫자

SQL> create sequence id_seq
  2  start with 1
  3  increment by 1;

이때 start값이 1이고 increment값이 1이라고 한다면 생략이 가능하다.

시퀀스를 만든 후, 값을 입력할때는 아래와 같이 입력해 주면 된다.

SQL> insert into testmember
  2  values (id_seq.nextval, '소녀시대', 238839, '2007-08-02', 'girl@email.com', 'A');

SQL> select * from testmember;

데이타가 잘 입력되는걸 확인해 봤으면 아래와 같이 입력해 보자

SQL> insert into testmember
  2  values (id_seq.nextval, '아이유', 190378, '2008-09-23', 'iu@email.com', 'A');

SQL> insert into testmember
  2  values (id_seq.nextval, '트와이스', 64798, '2015-10-19', 'twice@email.com', 'B');

SQL> insert into testmember
  2  values (id_seq.nextval, '에이핑크', 158068, '2011-04-19', 'apink@email.com', 'A');

SQL> insert into testmember
  2  values (id_seq.nextval, '여자친구', 63335, '2015-01-15', 'girlf@email.com', 'B');

SQL> insert into testmember
  2  values (id_seq.nextval, 'AOA', 46710, '2012-06-30', 'aoa@email.com', 'C');

SQL> insert into testmember
  2  values (id_seq.nextval, '씨스타', 51550, '2010-06-03', 'sistar@email.com', 'C');

멤버 중 이름과 회원수만 보고 싶다면...
SQL> select name, members from testmember;

회원의 수가 10만이상인 멤버만 보고 싶다면...
SQL> select * from testmember where members>100000;

이름이 소녀시대인 멤버를 보고 싶다면...
SQL> select * from testmember where name = '소녀시대';

2015년 데뷔한 멤버를 보고 싶다면...
SQL> select * from testmember where birth like '2015%';

6월에 데뷔한 멤버를 보고 싶다면...
SQL> select * from testmember where birth like '%06%';

19일에 데뷔한 멤버를 보고 싶다면...
SQL> select * from testmember where birth like '%19';

회원수가 많은 순서대로 보고 싶다면...
SQL> select * from testmember order by members desc;

회원수가 낮은 순서대로 보고 싶다면...
SQL> select * from testmember order by members asc;

멤버들의 총 회원수가 보고 싶다면...
SQL> select sum(members) from testmember;

grand가 A인 멤버의 총 회원수가 보고 싶다면...
SQL> select sum(members) from testmember where grand='A';

총 멤버의 수가 보고 싶다면...
SQL> select count(*) from testmember;

회원수가 10만 이상인 멤버의 수가 보고싶다면..
SQL> select count(*) from testmember where members>100000;

회원수가 제일 많은 멤버를 회원수가 보고싶다면...
SQL> select max(members) from testmember;

회원수가 제일 작은 멤버를 회원수가 보고싶다면...
SQL> select min(members) from testmember;

전체 멤버의 회원수 평균은
SQL> select avg(members) from testmember;

grand별 회원의 평균은
SQL> select grand, avg(members) from testmember group by grand;

지금까지 작업한 내용을 저장하고 할때사용하는 명령어
SQL> commit;

이제 data를 수정하도록 합시다
SQL> update testmember set email='' where grand='C';

SQL> select * from testmember;

grand c에 속하는 멤버의 이메일을 지웠습니다.
근데 이작업이 잘 못 되었다고 한다면 어떻게 할까요?
그때 사용하는 명령어 입니다.

SQL> rollback;

이 명령어는 마지막 commit 위치로 자료를 돌려놓습니다.
commit을 하지 않는다면 입력, 수정, 삭제한 자료가 저장되지 않은채 남아있게 됩니다.
데이타를 입력, 수정, 삭제하였다면 commit을 반드시 실행해야 합니다.
단, commit을 하면 이전 commit으로 이전 시킬 수 없습니다.

데이타를 삭제할때는
SQL> delete from testmember where grand='A';

SQL> select * from testmember;

grand가 A인 멤버를 모두 삭제한걸 볼 수 있습니다.
다시 되돌려 볼까요?
SQL> rollback;

여기까지가 DML 예제였습니다.

다음은 오라클에서 제공하는 여러 함수를 더 알아보도록 하겠습니다.

- 샘플 테이블인 dual 테이블
   select * from dual;
- 임시 데이터 출력 결과
  select 1234*1234 from dual;
- lower() : 소문자
  select lower('REDPLUS') as red from dual;
- upper() : 대문자
  select upper('redplus') as red from dual;
- initcap() : 첫자만 대문자
  select initcap('red plus') as a from dual;
- concat() : 문자열 연결
  select concat('red', 'plus') from dual;
- length(), lengthb() : 문자열 길이 - 1byte반환, 3byte반환
  select length('redplus'), lengthb('레드플러스') from dual;
- substr(), substrb() : 문자열 추출
  select substr('RedPlus', 1, 3) from dual;
- instr() : 문자열 시작 위치 
  select instr('RedPlus', 'Plus') from dual;
- lpad() : 왼쪽 자리 채우기 
  select lpad('RedPlus', 10, '@') from dual;
- rpad() : 오른쪽 자리 채우기
  select rpad('RedPlus', 10, '@') from dual;
- trim() : 양쪽 공백 문자만 제거
  select trim(' ' from ' RedPlus ') from dual;
- abs() : 절대값
  select abs(-10) from dual;
- floor() : 소수자리 버리기
  select floor(12.34) from dual;
- trunc() : 소수점 특정 자리 자르기
  select trunc(12.3456, 3) from dual;
- mod() : 나머지
  select mod(3, 5) from dual;
- sysdate() : 날짜
  select sysdate from dual;
- months_between() : 개월수 구하기 
  select name, months_between(sysdate, birth) from testMember where members>100000;
- add_months() : 개월수 더하기
  select add_months(sysdate, 4) from dual;
- next_day(sysdate, '일요일') : 다가올 요일에 해당하는 날짜
  select next_day(sysdate, '일요일') from dual;
- last_day() : 해당 달의 마지막 일수
  select last_day(sysdate) from dual;
- to_char() : 문자열로 변환
  select to_char(sysdate, 'yyyy-mm-dd') from dual;
- to_date() : 날짜형으로 변환
  select sysdate - to_date('2008/01/01','yyyy/mm/dd') from dual;

- case() : else if문
  select name, grand,
  case when grand = 'A' then '최고잘하는수준'
  when grand = 'B' then '잘하는수준'
  when grand = 'C' then '보통수준'
  when grand = 'D' then '못하는수준'
  end dname
  from testmember;

- decode() : switch문과 같은 기능
  select name, decode(grand, 'A', '10번', 'B', '20번', '기본')  from testmember;

- round() : 반올림
  select name, round(members, -2) from testmember where grand = 'A';

- 조건이 2개 있을경우 
  select * from testmember where grand in ('A', 'B');

- 평균 회원수보다 많은 멤버
  select * from testmember
  where members>(select avg(members) from testmember);  

- grand별 가장 많은 회원수를 가진 멤버
  select * from testmember where (grand, members) in 
  (select grand, max(members) from testmember group by grand);


- 추가 자료
 - select시 이름을 바꾸어 출력을 시켜줄수 있다.
 - hr/hr로 들어가서...
   select last_name, salary*12 from employees;
   - 출력시 column명을 다른이름으로 바꿔 출력하고자 할때
   -> select last_name as NAME, salary*12 Annual_Salary from employees;
   -> select last_name "NAME", salary*12 "Annual Salary" from employees;(공백처리를 위해 ""로 묶음)
   - 출력시 두개의 열을 붙혀서 나타나게 하고자 하면 
   -> select last_name||job_id as "Employees" from employees;
   -> select last_name||' is a '||job_id as "Employees" from employees;(리터럴문자를 섞어써도 가능)
   - 대체인용연산자 q : 대괄호[]가 따옴표를 구분자로 사용, 괄호안의 '는 문자열로 사용
   -> select department_name || q'[Department's Manager Id: ]' || manager_id
       as "Department and Manager" from departments;
   - 중복 행을 표시 하지 않을때..
   -> select department_id from employees;(보통 이렇게 사용하는데..)
   -> select distinct department_id from employees;
  - ~에서 ~까지 범위를 정해 비교하기(문자값에도 between을 사용할 수 있다)
   -> select last_name, salary from employees where salary between 2500 and 3500;
  - 지정된 값만 출력되도록 하기
   -> select employee_id, last_name, salary, manager_id from employees 
       where manager_id in (100,101,201);
  - like 연산자 패턴 - % : 0개 이상의 문자, _ : 단일문자
   -> select last_name from employees where last_name like '_o%';
  - is null과 is not null
   -> select last_name, manager_id from employees where manager_id is null;(또는 not null)
  - 연산자 우선순위
   -> 산술연산자, 연결연산자, 비교조건, is, like, in, between, !=, not, and, or
  - order by절 - select절 문장 마지막에 온다
   -> desc : 내림차순, asc : 오름차순
   -> select last_name, job_id, department_id, hire_date from employees order by 3;(3번째 열로 정렬)
 - 치환변수 
   단일 앰퍼샌드(&) 사용 예제
   - 숫자값
   select employee_id, last_name, salary, department_id from employees where employee_id = &employee_num;
   Enter value for employee_num: 100
   old   1: select employee_id, last_name, salary, department_id from employees where employee_id = &employee_num
   new   1: select employee_id, last_name, salary, department_id from employees where employee_id = 100
   - 문자값
   select last_name, department_id, salary*12 from employees where job_id='&job_title';
   Enter value for job_title: IT_PROG
   old   1: select last_name, department_id, salary*12 from employees where job_id='&job_title'
   new   1: select last_name, department_id, salary*12 from employees where job_id='IT_PROG'  
   - 열이름, 표현식 및 텍스트지정
   select employee_id, last_name, job_id, &column_name from employees where &condition order by &order_column;
   Enter value for column_name: salary
   Enter value for condition: salary>15000
   Enter value for order_column: last_name
   old   1: select employee_id, last_name, job_id, &column_name from employees where &condition order by &order_column
   new   1: select employee_id, last_name, job_id, salary from employees where salary>15000 order by last_name
   - 이중 앰퍼샌드(&&) - 한번 입력한 변수값을 다시 사용하고자 할때
   select employee_id, last_name, job_id, &&column_name from employees order by &column_name;
   Enter value for column_name: department_id
   old   1: select employee_id, last_name, job_id, &&column_name from employees order by &column_name
   new   1: select employee_id, last_name, job_id, department_id from employees order by department_id
   - 변수값 설정
   SQL> define employee_num=200
   SQL> select employee_id, last_name, salary, department_id from employees where employee_id = &employee_num;
   old   1: select employee_id, last_name, salary, department_id from employees where employee_id = &employee_num
   new   1: select employee_id, last_name, salary, department_id from employees where employee_id = 200
   EMPLOYEE_ID LAST_NAME           SALARY DEPARTMENT_ID
   ----------- --------------- ---------- -------------
           200 Whalen                4400            10
   SQL> undefine employee_num
  - 치환한 값 보여주기, 안보여주기
  SQL> select employee_id, last_name, salary, department_id from employees where employee_id = &employee_num;
  Enter value for employee_num: 200
  old   1: select employee_id, last_name, salary, department_id from employees where employee_id = &employee_num
  new   1: select employee_id, last_name, salary, department_id from employees where employee_id = 200
  EMPLOYEE_ID LAST_NAME           SALARY DEPARTMENT_ID
  ----------- --------------- ---------- -------------
          200 Whalen                4400            10
  SQL> set verify off
  SQL> select employee_id, last_name, salary, department_id from employees where employee_id = &employee_num;
  Enter value for employee_num: 200
  EMPLOYEE_ID LAST_NAME           SALARY DEPARTMENT_ID
  ----------- --------------- ---------- -------------
          200 Whalen                4400            10
   





